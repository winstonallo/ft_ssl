--------------------------------------------------------------------------------
Profile data file 'callgrind.out.3522066' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 740359160
Trigger: Program termination
Profiled target:  ./ft_ssl md5 /tmp/.out (PID 3522066, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,722,754,782 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
5,346,102,511 (79.52%)  src/md5.c:md5_hash [/home/winstonallo/mastery/ft_ssl/ft_ssl]
1,258,291,968 (18.72%)  src/bit/rotate.c:rotl_32 [/home/winstonallo/mastery/ft_ssl/ft_ssl]
  104,857,617 ( 1.56%)  libft/src/ft_memcpy.c:ft_memcpy [/home/winstonallo/mastery/ft_ssl/ft_ssl]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/bit/rotate.c
--------------------------------------------------------------------------------
Ir                   

          .           #include <sys/types.h>
          .           
          .           // Rotates `val` to the left by `by` bits.
          .           uint32_t
524,288,320 ( 7.80%)  rotl_32(uint32_t val, const uint32_t by) {
524,288,320 ( 7.80%)      return (val << by) | (val >> (32 - by));
209,715,328 ( 3.12%)  }
          .           
          .           // Rotates `val` to the right by `by` bits.
          .           uint32_t
          .           rotr_32(uint32_t val, const uint32_t by) {
          .               return (val >> by) | (val << (32 - by));
          .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: libft/src/ft_memcpy.c
--------------------------------------------------------------------------------
Ir                   

-- line 8 ----------------------------------------
          .           /*   Created: 2023/09/04 17:21:27 by abied-ch          #+#    #+#             */
          .           /*   Updated: 2023/10/08 16:40:17 by abied-ch         ###   ########.fr       */
          .           /*                                                                            */
          .           /* ************************************************************************** */
          .           
          .           #include "../include/libft.h"
          .           
          .           void *
          6 ( 0.00%)  ft_memcpy(void *dest, const void *src, size_t n) {
          2 ( 0.00%)      if (!dest && !src) {
          .                   return (NULL);
          .               }
          .           
          .           #if defined(__x86_64__) || defined(_M_X64) || defined(__i386__)
104,857,606 ( 1.56%)      __asm__ __volatile__("rep movsb" : : "S"(src), "D"(dest), "c"(n) : "memory");
          .           #else
          .               size_t i = 0;
          .           
          .               while (i < n) {
          .                   ((unsigned char *)dest)[i] = ((unsigned char *)src)[i];
          .                   i++;
          .               }
          .           #endif
          .           
          1 ( 0.00%)      return dest;
          2 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: src/md5.c
--------------------------------------------------------------------------------
Ir                     

-- line 48 ----------------------------------------
            .           } Words;
            .           
            .           typedef struct Message {
            .               uint8_t *bytes;
            .               size_t len;
            .           } Message;
            .           
            .           size_t
            6 ( 0.00%)  md5_calculate_padding(size_t original_size) {
           51 ( 0.00%)  => ./gmon/../sysdeps/x86_64/_mcount.S:mcount (1x)
            4 ( 0.00%)      if (original_size % 64 > 55) {
            .                   return MD5_BLOCK_SIZE - ((original_size % MD5_BLOCK_SIZE) + 1) + 56;
            .               } else {
            4 ( 0.00%)          return MD5_BLOCK_SIZE - ((original_size % MD5_BLOCK_SIZE) + 1) - 8;
            .               }
            2 ( 0.00%)  }
            .           
            .           Message
            6 ( 0.00%)  md5_pad(File *msg) {
           51 ( 0.00%)  => ./gmon/../sysdeps/x86_64/_mcount.S:mcount (1x)
            2 ( 0.00%)      Message buf = {0};
            .           
            5 ( 0.00%)      uint64_t padding_size = md5_calculate_padding(msg->content_size);
           67 ( 0.00%)  => src/md5.c:md5_calculate_padding (1x)
            .           
            7 ( 0.00%)      ssize_t new_size = msg->content_size + padding_size + 1 + 8;
            .           
            4 ( 0.00%)      if (new_size >= msg->allocated_bytes) {
            .                   msg->reallocated = true;
            .                   buf.bytes = malloc(new_size * sizeof(char));
            .                   if (!buf.bytes) {
            .                       return buf;
            .                   }
            .               } else {
            3 ( 0.00%)          buf.bytes = (uint8_t *)msg->content;
            .               }
            .           
            9 ( 0.00%)      ft_memcpy(buf.bytes, msg->content, msg->content_size);
  104,857,617 ( 1.56%)  => /home/winstonallo/mastery/ft_ssl/libft/src/ft_memcpy.c:ft_memcpy (1x)
            4 ( 0.00%)      if (msg->reallocated) {
            .                   free(msg->content);
            .               }
            .           
            5 ( 0.00%)      buf.bytes[msg->content_size] = (char)0x80;
            9 ( 0.00%)      *(uint64_t *)(&buf.bytes[new_size - 8]) = msg->content_size * 8;
            .           
            2 ( 0.00%)      buf.len = new_size;
            .           
            2 ( 0.00%)      return buf;
            2 ( 0.00%)  }
            .           
            .           static void
           15 ( 0.00%)  md5_store_to_buf(char *buf, Words words) {
           51 ( 0.00%)  => ./gmon/../sysdeps/x86_64/_mcount.S:mcount (1x)
            2 ( 0.00%)      uint32_t A = words.A;
            2 ( 0.00%)      uint32_t B = words.B;
            2 ( 0.00%)      uint32_t C = words.C;
            2 ( 0.00%)      uint32_t D = words.D;
            .           
            1 ( 0.00%)      int idx = 0;
            .           
            7 ( 0.00%)      byte_to_hex(A & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((A >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((A >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((A >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            7 ( 0.00%)      byte_to_hex(B & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((B >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((B >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((B >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            7 ( 0.00%)      byte_to_hex(C & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((C >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((C >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((C >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            7 ( 0.00%)      byte_to_hex(D & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((D >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((D >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((D >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            5 ( 0.00%)      buf[idx] = '\0';
            6 ( 0.00%)  }
            .           
            .           static int
            7 ( 0.00%)  md5_hash(File *msg, Words *words) {
           51 ( 0.00%)  => ./gmon/../sysdeps/x86_64/_mcount.S:mcount (1x)
            5 ( 0.00%)      Message buf = md5_pad(msg);
  104,857,795 ( 1.56%)  => src/md5.c:md5_pad (1x)
            3 ( 0.00%)      if (!buf.bytes) {
            .                   return -1;
            .               }
            .           
            1 ( 0.00%)      uint32_t a0 = DFLT_A;
            1 ( 0.00%)      uint32_t b0 = DFLT_B;
            1 ( 0.00%)      uint32_t c0 = DFLT_C;
            1 ( 0.00%)      uint32_t d0 = DFLT_D;
            .           
   14,745,620 ( 0.22%)      for (uint8_t *chunk = buf.bytes; (size_t)chunk - (size_t)buf.bytes < buf.len; chunk += MD5_BLOCK_SIZE) {
            .           
    3,276,802 ( 0.05%)          uint32_t *block = (void *)chunk;
            .           
    3,276,802 ( 0.05%)          uint32_t A = a0;
    3,276,802 ( 0.05%)          uint32_t B = b0;
    3,276,802 ( 0.05%)          uint32_t C = c0;
    3,276,802 ( 0.05%)          uint32_t D = d0;
            .           
  321,126,596 ( 4.78%)          for (size_t step = 0; step < 64; ++step) {
            .                       uint32_t F;
            .                       uint32_t g;
            .           
  209,715,328 ( 3.12%)              if (step < 16) {
  235,929,744 ( 3.51%)                  F = (B & C) | ((~B) & D);
  157,286,496 ( 2.34%)              } else if (step < 32) {
  235,929,744 ( 3.51%)                  F = (D & B) | ((~D) & C);
  104,857,664 ( 1.56%)              } else if (step < 48) {
  131,072,080 ( 1.95%)                  F = B ^ C ^ D;
            .                       } else {
  131,072,080 ( 1.95%)                  F = C ^ (B | (~D));
            .                       }
            .           
            .                       // switch (step / 16) {
            .                       // case 0:
            .                       //     F = (B & C) | ((~B) & D);
            .                       //     break;
            .                       // case 1:
            .                       //     F = (D & B) | ((~D) & C);
-- line 167 ----------------------------------------
-- line 169 ----------------------------------------
            .                       // case 2:
            .                       //     F = B ^ C ^ D;
            .                       //     break;
            .                       // case 3:
            .                       //     F = C ^ (B | (~D));
            .                       //     break;
            .                       // }
            .           
  629,145,984 ( 9.36%)              g = block_idx[step];
            .           
1,572,864,960 (23.40%)              F = F + A + K[step] + block[g];
  209,715,328 ( 3.12%)              A = D;
  209,715,328 ( 3.12%)              D = C;
  209,715,328 ( 3.12%)              C = B;
  943,718,976 (14.04%)              B += rotl_32(F, s[step]);
1,258,291,968 (18.72%)  => /home/winstonallo/mastery/ft_ssl/src/bit/rotate.c:rotl_32 (104,857,664x)
            .                   }
            .           
    3,276,802 ( 0.05%)          a0 += A;
    3,276,802 ( 0.05%)          b0 += B;
    3,276,802 ( 0.05%)          c0 += C;
    3,276,802 ( 0.05%)          d0 += D;
            .               }
            .           
            3 ( 0.00%)      words->A = a0;
            3 ( 0.00%)      words->B = b0;
            3 ( 0.00%)      words->C = c0;
            3 ( 0.00%)      words->D = d0;
            .           
            3 ( 0.00%)      free(buf.bytes);
           69 ( 0.00%)  => ???:0x00000000001090f0 (1x)
            1 ( 0.00%)      return 0;
            2 ( 0.00%)  }
            .           
            .           // Memory Safety:
            .           // `buf` is assumed to be a buffer capable of holding `33 bytes` (the size of
            .           // the MD5 hash function's output + `\0`). Failure to ensure this will lead to
            .           // memory corruption.
            .           // Cryptographic Safety:
            .           // - The MD5 hash algorithm is not collision-resistant. This should not
            .           // be used for anything else than educational purposes.
            .           // https://en.wikipedia.org/wiki/MD5
            .           int
           10 ( 0.00%)  md5(File *msg, char *buf) {
           51 ( 0.00%)  => ./gmon/../sysdeps/x86_64/_mcount.S:mcount (1x)
            4 ( 0.00%)      Words words = {DFLT_A, DFLT_B, DFLT_C, DFLT_D};
            .           
            7 ( 0.00%)      if (md5_hash(msg, &words) == -1) {
6,709,252,394 (99.80%)  => src/md5.c:md5_hash (1x)
            .                   return -1;
            .               }
            .           
            6 ( 0.00%)      md5_store_to_buf(buf, words);
          882 ( 0.00%)  => src/md5.c:md5_store_to_buf (1x)
            1 ( 0.00%)      return 0;
            5 ( 0.00%)  }

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,709,252,364 (99.80%)  events annotated

