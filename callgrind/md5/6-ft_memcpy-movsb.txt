--------------------------------------------------------------------------------
Profile data file 'callgrind.out.3335173' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 386820588
Trigger: Program termination
Profiled target:  ./ft_ssl md5 .out (PID 3335173, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,522,043,416 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
2,803,112,219 (79.59%)  src/md5.c:md5_hash [/home/winstonallo/mastery/ft_ssl/ft_ssl]
  656,538,624 (18.64%)  src/bit/rotate.c:rotl [/home/winstonallo/mastery/ft_ssl/ft_ssl]
   54,711,515 ( 1.55%)  libft/src/ft_memcpy.c:ft_memcpy [/home/winstonallo/mastery/ft_ssl/ft_ssl]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/bit/rotate.c
--------------------------------------------------------------------------------
Ir                   

          .           #include <sys/types.h>
          .           
          .           // Rotates `val` to the left by `by` bits.
          .           uint32_t
273,557,760 ( 7.77%)  rotl(uint32_t val, const uint32_t by) {
273,557,760 ( 7.77%)      return (val << by) | (val >> (32 - by));
109,423,104 ( 3.11%)  }
          .           
          .           // Rotates `val` to the right by `by` bits.
          .           uint32_t
          .           rotr(uint32_t val, const uint32_t by) {
          .               return (val >> by) | (val << (32 - by));
          .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: libft/src/ft_memcpy.c
--------------------------------------------------------------------------------
Ir                  

-- line 8 ----------------------------------------
         .           /*   Created: 2023/09/04 17:21:27 by abied-ch          #+#    #+#             */
         .           /*   Updated: 2023/10/08 16:40:17 by abied-ch         ###   ########.fr       */
         .           /*                                                                            */
         .           /* ************************************************************************** */
         .           
         .           #include "../include/libft.h"
         .           
         .           void *
         6 ( 0.00%)  ft_memcpy(void *dest, const void *src, uint64_t n) {
         2 ( 0.00%)      if (!dest && !src) {
         .                   return (NULL);
         .               }
         .           
         .           #if defined(__x86_64__) || defined(_M_X64) || defined(__i386__)
54,711,504 ( 1.55%)      __asm__ __volatile__("rep movsb" : : "S"(src), "D"(dest), "c"(n) : "memory");
         .           #else
         .               uint64_t i = 0;
         .           
         .               while (i < n) {
         .                   ((unsigned char *)dest)[i] = ((unsigned char *)src)[i];
         .                   i++;
         .               }
         .           #endif
         .           
         1 ( 0.00%)      return dest;
         2 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: src/md5.c
--------------------------------------------------------------------------------
Ir                   

-- line 40 ----------------------------------------
          .           } Words;
          .           
          .           typedef struct Message {
          .               uint8_t *bytes;
          .               uint64_t len;
          .           } Message;
          .           
          .           uint64_t
          4 ( 0.00%)  md5_calculate_padding(uint64_t original_size) {
          4 ( 0.00%)      if (original_size % 64 > 55) {
          .                   return MD5_BLOCK_SIZE - ((original_size % MD5_BLOCK_SIZE) + 1) + 56;
          .               } else {
          4 ( 0.00%)          return MD5_BLOCK_SIZE - ((original_size % MD5_BLOCK_SIZE) + 1) - 8;
          .               }
          2 ( 0.00%)  }
          .           
          .           Message
          5 ( 0.00%)  md5_pad(File *msg) {
          2 ( 0.00%)      Message buf = {0};
          .           
          5 ( 0.00%)      uint64_t padding_size = md5_calculate_padding(msg->content_size);
         14 ( 0.00%)  => src/md5.c:md5_calculate_padding (1x)
          .           
          7 ( 0.00%)      ssize_t new_size = msg->content_size + padding_size + 1 + 8;
          .           
          4 ( 0.00%)      if (new_size >= msg->allocated_bytes) {
          .                   msg->reallocated = true;
          .                   buf.bytes = malloc(new_size * sizeof(char));
          .                   if (!buf.bytes) {
          .                       return buf;
          .                   }
          .               } else {
          3 ( 0.00%)          buf.bytes = (uint8_t *)msg->content;
          .               }
          .           
          9 ( 0.00%)      ft_memcpy(buf.bytes, msg->content, msg->content_size);
 54,711,515 ( 1.55%)  => /home/winstonallo/mastery/ft_ssl/libft/src/ft_memcpy.c:ft_memcpy (1x)
          4 ( 0.00%)      if (msg->reallocated) {
          .                   free(msg->content);
          .               }
          .           
          5 ( 0.00%)      buf.bytes[msg->content_size] = (char)0x80;
          9 ( 0.00%)      *(uint64_t *)(&buf.bytes[new_size - 8]) = msg->content_size * 8;
          .           
          2 ( 0.00%)      buf.len = new_size;
          .           
          2 ( 0.00%)      return buf;
          2 ( 0.00%)  }
          .           
          .           static void
         14 ( 0.00%)  md5_store_to_buf(char *buf, Words words) {
          2 ( 0.00%)      uint32_t A = words.A;
          2 ( 0.00%)      uint32_t B = words.B;
          2 ( 0.00%)      uint32_t C = words.C;
          2 ( 0.00%)      uint32_t D = words.D;
          .           
          1 ( 0.00%)      int idx = 0;
          .           
          7 ( 0.00%)      byte_to_hex(A & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((A >> 8) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((A >> 16) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((A >> 24) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          .           
          7 ( 0.00%)      byte_to_hex(B & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((B >> 8) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((B >> 16) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((B >> 24) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          .           
          7 ( 0.00%)      byte_to_hex(C & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((C >> 8) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((C >> 16) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((C >> 24) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          .           
          7 ( 0.00%)      byte_to_hex(D & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((D >> 8) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((D >> 16) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          8 ( 0.00%)      byte_to_hex((D >> 24) & 0xFF, buf, &idx);
         42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
          .           
          5 ( 0.00%)      buf[idx] = '\0';
          6 ( 0.00%)  }
          .           
          .           static int
          6 ( 0.00%)  md5_hash(File *msg, Words *words) {
          5 ( 0.00%)      Message buf = md5_pad(msg);
 54,711,588 ( 1.55%)  => src/md5.c:md5_pad (1x)
          3 ( 0.00%)      if (!buf.bytes) {
          .                   return -1;
          .               }
          .           
          1 ( 0.00%)      uint32_t a0 = DFLT_A;
          1 ( 0.00%)      uint32_t b0 = DFLT_B;
          1 ( 0.00%)      uint32_t c0 = DFLT_C;
          1 ( 0.00%)      uint32_t d0 = DFLT_D;
          .           
  7,693,823 ( 0.22%)      for (uint8_t *chunk = buf.bytes; (uint64_t)chunk - (uint64_t)buf.bytes < buf.len; chunk += MD5_BLOCK_SIZE) {
          .           
  1,709,736 ( 0.05%)          uint32_t *block = (void *)chunk;
          .           
  1,709,736 ( 0.05%)          uint32_t A = a0;
  1,709,736 ( 0.05%)          uint32_t B = b0;
  1,709,736 ( 0.05%)          uint32_t C = c0;
  1,709,736 ( 0.05%)          uint32_t D = d0;
          .           
167,554,128 ( 4.76%)          for (uint64_t step = 0; step < 64; ++step) {
          .                       uint32_t F;
          .                       uint32_t g;
          .           
109,423,104 ( 3.11%)              if (step < 16) {
109,423,104 ( 3.11%)                  F = (B & C) | ((~B) & D);
 41,033,664 ( 1.17%)                  g = step;
 82,067,328 ( 2.33%)              } else if (step < 32) {
109,423,104 ( 3.11%)                  F = (D & B) | ((~D) & C);
123,100,992 ( 3.50%)                  g = (5 * step + 1) % 16;
 54,711,552 ( 1.55%)              } else if (step < 48) {
 54,711,552 ( 1.55%)                  F = B ^ C ^ D;
123,100,992 ( 3.50%)                  g = (3 * step + 5) % 16;
          .                       } else {
 68,389,440 ( 1.94%)                  F = C ^ (B | (~D));
 95,745,216 ( 2.72%)                  g = (7 * step) % 16;
          .                       }
          .           
820,673,280 (23.30%)              F = F + A + K[step] + block[g];
109,423,104 ( 3.11%)              A = D;
109,423,104 ( 3.11%)              D = C;
109,423,104 ( 3.11%)              C = B;
492,403,968 (13.98%)              B += rotl(F, s[step]);
656,538,624 (18.64%)  => /home/winstonallo/mastery/ft_ssl/src/bit/rotate.c:rotl (54,711,552x)
          .                   }
          .           
  1,709,736 ( 0.05%)          a0 += A;
  1,709,736 ( 0.05%)          b0 += B;
  1,709,736 ( 0.05%)          c0 += C;
  1,709,736 ( 0.05%)          d0 += D;
          .               }
          .           
          3 ( 0.00%)      words->A = a0;
          3 ( 0.00%)      words->B = b0;
          3 ( 0.00%)      words->C = c0;
          3 ( 0.00%)      words->D = d0;
          .           
          3 ( 0.00%)      free(buf.bytes);
         69 ( 0.00%)  => ???:0x00000000001090d0 (1x)
          1 ( 0.00%)      return 0;
          2 ( 0.00%)  }
          .           
          .           // Memory Safety:
          .           // `buf` is assumed to be a buffer capable of holding `33 bytes` (the size of
          .           // the MD5 hash function's output + `\0`). Failure to ensure this will lead to
          .           // memory corruption.
          .           // Cryptographic Safety:
          .           // - The MD5 hash algorithm is not collision-resistant. This should not
          .           // be used for anything else than educational purposes.
          .           // https://en.wikipedia.org/wiki/MD5
          .           int
          9 ( 0.00%)  md5(File *msg, char *buf) {
          4 ( 0.00%)      Words words = {DFLT_A, DFLT_B, DFLT_C, DFLT_D};
          .           
          7 ( 0.00%)      if (md5_hash(msg, &words) == -1) {
3,514,362,500 (99.78%)  => src/md5.c:md5_hash (1x)
          .                   return -1;
          .               }
          .           
          6 ( 0.00%)      md5_store_to_buf(buf, words);
        830 ( 0.00%)  => src/md5.c:md5_store_to_buf (1x)
          1 ( 0.00%)      return 0;
          5 ( 0.00%)  }

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,514,362,621 (99.78%)  events annotated

