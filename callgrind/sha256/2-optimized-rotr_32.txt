--------------------------------------------------------------------------------
Profile data file 'callgrind.out.3018073' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 4312043447
Trigger: Program termination
Profiled target:  ./ft_ssl sha256 /tmp/.out (PID 3018073, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
34,297,011,518 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                       file:function
--------------------------------------------------------------------------------
14,155,784,640 (41.27%)  src/bit/rotate.c:rotr_32 [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 8,226,411,460 (23.99%)  src/sha256.c:sha256_hash [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 2,516,583,936 ( 7.34%)  src/sha256.c:Sig0 [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 2,516,583,936 ( 7.34%)  src/sha256.c:Sig1 [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 1,808,794,704 ( 5.27%)  src/sha256.c:sig0 [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 1,808,794,704 ( 5.27%)  src/sha256.c:sig1 [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 1,572,864,960 ( 4.59%)  src/sha256.c:Ch [/home/winstonallo/mastery/ft_ssl/ft_ssl]
 1,572,864,960 ( 4.59%)  src/sha256.c:Maj [/home/winstonallo/mastery/ft_ssl/ft_ssl]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/bit/rotate.c
--------------------------------------------------------------------------------
Ir                     

-- line 7 ----------------------------------------
            .               if ((by &= 32 - 1) == 0) {
            .                   return val;
            .               }
            .               return (val << by) | (val >> (32 - by));
            .           }
            .           
            .           // Rotates `val` to the right by `by` bits.
            .           uint32_t
4,718,594,880 (13.76%)  rotr_32(uint32_t val, uint32_t by) {
2,831,156,928 ( 8.25%)      if ((by &= 32 - 1) == 0) {
            .                   return val;
            .               }
4,718,594,880 (13.76%)      return (val >> by) | (val << (32 - by));
1,887,437,952 ( 5.50%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: src/sha256.c
--------------------------------------------------------------------------------
Ir                     

-- line 37 ----------------------------------------
            .               uint32_t d;
            .               uint32_t e;
            .               uint32_t f;
            .               uint32_t g;
            .               uint32_t h;
            .           } Words;
            .           
            .           static uint32_t
  471,859,488 ( 1.38%)  sig0(uint32_t val) {
1,101,005,472 ( 3.21%)      return rotr_32(val, 7) ^ rotr_32(val, 18) ^ val >> 3;
2,359,297,440 ( 6.88%)  => /home/winstonallo/mastery/ft_ssl/src/bit/rotate.c:rotr_32 (157,286,496x)
  235,929,744 ( 0.69%)  }
            .           
            .           static uint32_t
  471,859,488 ( 1.38%)  sig1(uint32_t val) {
1,101,005,472 ( 3.21%)      return rotr_32(val, 17) ^ rotr_32(val, 19) ^ val >> 10;
2,359,297,440 ( 6.88%)  => /home/winstonallo/mastery/ft_ssl/src/bit/rotate.c:rotr_32 (157,286,496x)
  235,929,744 ( 0.69%)  }
            .           
            .           static uint32_t
  629,145,984 ( 1.83%)  Sig0(uint32_t val) {
1,572,864,960 ( 4.59%)      return rotr_32(val, 2) ^ rotr_32(val, 13) ^ rotr_32(val, 22);
4,718,594,880 (13.76%)  => /home/winstonallo/mastery/ft_ssl/src/bit/rotate.c:rotr_32 (314,572,992x)
  314,572,992 ( 0.92%)  }
            .           
            .           static uint32_t
  629,145,984 ( 1.83%)  Sig1(uint32_t val) {
1,572,864,960 ( 4.59%)      return rotr_32(val, 6) ^ rotr_32(val, 11) ^ rotr_32(val, 25);
4,718,594,880 (13.76%)  => /home/winstonallo/mastery/ft_ssl/src/bit/rotate.c:rotr_32 (314,572,992x)
  314,572,992 ( 0.92%)  }
            .           
            .           static uint32_t
  629,145,984 ( 1.83%)  Ch(uint32_t e, uint32_t f, uint32_t g) {
  734,003,648 ( 2.14%)      return (e & f) ^ (~e & g);
  209,715,328 ( 0.61%)  }
            .           
            .           static uint32_t
  629,145,984 ( 1.83%)  Maj(uint32_t a, uint32_t b, uint32_t c) {
  734,003,648 ( 2.14%)      return (a & b) ^ (a & c) ^ (b & c);
  209,715,328 ( 0.61%)  }
            .           
            .           uint64_t
            4 ( 0.00%)  calculate_padding(uint64_t original_size) {
            4 ( 0.00%)      if (original_size % 64 > 55) {
            .                   return SHA256_BLOCK_SIZE - ((original_size % SHA256_BLOCK_SIZE) + 1) + 56;
            .               } else {
            4 ( 0.00%)          return SHA256_BLOCK_SIZE - ((original_size % SHA256_BLOCK_SIZE) + 1) - 8;
            .               }
            2 ( 0.00%)  }
            .           
            .           Message
            5 ( 0.00%)  sha256_pad(File *msg) {
            2 ( 0.00%)      Message buf = {0};
            .           
            5 ( 0.00%)      uint64_t padding_size = calculate_padding(msg->content_size);
           14 ( 0.00%)  => src/sha256.c:calculate_padding (1x)
            .           
            7 ( 0.00%)      ssize_t new_size = msg->content_size + padding_size + 1 + 8;
            .           
            4 ( 0.00%)      if (new_size >= msg->allocated_bytes) {
            .                   msg->reallocated = true;
            .                   buf.bytes = malloc(new_size * sizeof(char));
            .                   if (!buf.bytes) {
            .                       return buf;
            .                   }
            .               } else {
            3 ( 0.00%)          buf.bytes = (uint8_t *)msg->content;
            .               }
            .           
            9 ( 0.00%)      ft_memcpy(buf.bytes, msg->content, msg->content_size);
  104,857,617 ( 0.31%)  => /home/winstonallo/mastery/ft_ssl/libft/src/ft_memcpy.c:ft_memcpy (1x)
            4 ( 0.00%)      if (msg->reallocated) {
            .                   free(msg->content);
            .               }
            .           
            5 ( 0.00%)      buf.bytes[msg->content_size] = (char)0x80;
           11 ( 0.00%)      *(uint64_t *)(&buf.bytes[new_size - 8]) = (uint64_t)__builtin_bswap64(msg->content_size * 8);
            2 ( 0.00%)      buf.len = new_size;
            .           
            2 ( 0.00%)      return buf;
            2 ( 0.00%)  }
            .           
            .           static void
            8 ( 0.00%)  store_to_buf(char *buf, Words words) {
            2 ( 0.00%)      uint32_t a = words.a;
            2 ( 0.00%)      uint32_t b = words.b;
            2 ( 0.00%)      uint32_t c = words.c;
            2 ( 0.00%)      uint32_t d = words.d;
            2 ( 0.00%)      uint32_t e = words.e;
            2 ( 0.00%)      uint32_t f = words.f;
            2 ( 0.00%)      uint32_t g = words.g;
            2 ( 0.00%)      uint32_t h = words.h;
            .           
            1 ( 0.00%)      int idx = 0;
            .           
            8 ( 0.00%)      byte_to_hex((a >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((a >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((a >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(a & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((b >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((b >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((b >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(b & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((c >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((c >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((c >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(c & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((d >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((d >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((d >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(d & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((e >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((e >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((e >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(e & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((f >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((f >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((f >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(f & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((g >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((g >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((g >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(g & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            8 ( 0.00%)      byte_to_hex((h >> 24) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((h >> 16) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            8 ( 0.00%)      byte_to_hex((h >> 8) & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            7 ( 0.00%)      byte_to_hex(h & 0xFF, buf, &idx);
           42 ( 0.00%)  => /home/winstonallo/mastery/ft_ssl/src/hex.c:byte_to_hex (1x)
            .           
            5 ( 0.00%)      buf[idx] = '\0';
            6 ( 0.00%)  }
            .           
            .           static int
           10 ( 0.00%)  sha256_hash(File *msg, Words *words) {
            .               (void)words;
            .           
            5 ( 0.00%)      Message buf = sha256_pad(msg);
  104,857,692 ( 0.31%)  => src/sha256.c:sha256_pad (1x)
            3 ( 0.00%)      if (!buf.bytes) {
            .                   return -1;
            .               }
            .           
   14,745,620 ( 0.04%)      for (uint8_t *chunk = buf.bytes; (uint64_t)chunk - (uint64_t)buf.bytes < buf.len; chunk += SHA256_BLOCK_SIZE) {
            .           
            .                   uint32_t W[64];
            .           
   85,196,852 ( 0.25%)          for (uint64_t t = 0; t < 16; ++t) {
  235,929,744 ( 0.69%)              W[t] = __builtin_bswap32(((uint32_t *)chunk)[t]);
            .                   }
            .           
  242,483,348 ( 0.71%)          for (uint64_t t = 16; t < 64; ++t) {
1,651,508,208 ( 4.82%)              W[t] = sig1(W[t - 2]) + W[t - 7] + sig0(W[t - 15]) + W[t - 16];
4,168,092,144 (12.15%)  => src/sha256.c:sig1 (78,643,248x)
4,168,092,144 (12.15%)  => src/sha256.c:sig0 (78,643,248x)
            .                   }
            .           
    4,915,203 ( 0.01%)          uint32_t a = words->a;
    4,915,203 ( 0.01%)          uint32_t b = words->b;
    4,915,203 ( 0.01%)          uint32_t c = words->c;
    4,915,203 ( 0.01%)          uint32_t d = words->d;
    4,915,203 ( 0.01%)          uint32_t e = words->e;
    4,915,203 ( 0.01%)          uint32_t f = words->f;
    4,915,203 ( 0.01%)          uint32_t g = words->g;
    4,915,203 ( 0.01%)          uint32_t h = words->h;
            .           
  321,126,596 ( 0.94%)          for (uint64_t t = 0; t < 64; ++t) {
2,202,010,944 ( 6.42%)              uint32_t t1 = h + Sig1(e) + Ch(e, f, g) + K[t] + W[t];
7,235,178,816 (21.10%)  => src/sha256.c:Sig1 (104,857,664x)
1,572,864,960 ( 4.59%)  => src/sha256.c:Ch (104,857,664x)
1,258,291,968 ( 3.67%)              uint32_t t2 = Sig0(a) + Maj(a, b, c);
7,235,178,816 (21.10%)  => src/sha256.c:Sig0 (104,857,664x)
1,572,864,960 ( 4.59%)  => src/sha256.c:Maj (104,857,664x)
            .           
  209,715,328 ( 0.61%)              h = g;
  209,715,328 ( 0.61%)              g = f;
  209,715,328 ( 0.61%)              f = e;
  419,430,656 ( 1.22%)              e = d + t1;
  209,715,328 ( 0.61%)              d = c;
  209,715,328 ( 0.61%)              c = b;
  209,715,328 ( 0.61%)              b = a;
  419,430,656 ( 1.22%)              a = t1 + t2;
            .                   }
            .           
    9,830,406 ( 0.03%)          words->a += a;
    9,830,406 ( 0.03%)          words->b += b;
    9,830,406 ( 0.03%)          words->c += c;
    9,830,406 ( 0.03%)          words->d += d;
    9,830,406 ( 0.03%)          words->e += e;
    9,830,406 ( 0.03%)          words->f += f;
    9,830,406 ( 0.03%)          words->g += g;
    9,830,406 ( 0.03%)          words->h += h;
            .               }
            3 ( 0.00%)      free(buf.bytes);
           69 ( 0.00%)  => ???:0x00000000001090d0 (1x)
            1 ( 0.00%)      return 0;
            6 ( 0.00%)  }
            .           
            .           int
            9 ( 0.00%)  sha256(File *msg, char *buf) {
            .           
            8 ( 0.00%)      Words words = {DFLT_A, DFLT_B, DFLT_C, DFLT_D, DFLT_E, DFLT_F, DFLT_G, DFLT_H};
            5 ( 0.00%)      sha256_hash(msg, &words);
34,283,541,061 (99.96%)  => src/sha256.c:sha256_hash (1x)
            .           
           14 ( 0.00%)      store_to_buf(buf, words);
        1,628 ( 0.00%)  => src/sha256.c:store_to_buf (1x)
            1 ( 0.00%)      return 0;
            5 ( 0.00%)  }

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
34,178,683,701 (99.65%)  events annotated

